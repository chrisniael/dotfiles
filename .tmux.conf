# default-terminal 会影响 ohmyzsh 的 AUTO_TITLE 功能
# https://github.com/ohmyzsh/ohmyzsh/issues/3579
# https://github.com/tmux/tmux/wiki/FAQ
# 设置为 tmux-256color 时，在 Mac 上执行 clear 的时候会提示：“Cannot read termcap database; using dumb terminal settings.“
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*256col*:Tc"

# tmux 响应 ESC 按键延迟
# Set the time in milliseconds for which tmux waits after an escape is input to determine if it is part of a function or meta key sequences.
# The default is 500 milliseconds.
# 解决 tmux 里使用 vim ESC 按键反馈很慢（从 Insert 模式到 Normal 模式）
# https://zhuanlan.zhihu.com/p/47801331
# https://superuser.com/questions/942677/consequences-of-escape-time-0-tmux-setting
# https://github.com/tmux/tmux/issues/907
set-option -sg escape-time 10  # 单位：毫秒

unbind C-b
set -g prefix C-j
bind C-j send-prefix

# 退出 session 的最后一个 windows 时切换到其他 session，如果还有 session 存在的话
set-option -g detach-on-destroy off

# Auto change title
set -g set-titles on
# #T 表示 pane name
# ohmyzsh 这块处理和 TERM 的值有关
# set -g set-titles-string "#T"
# 设置为 #h 暂时是比较好的方案
set -g set-titles-string "#h"
# set -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name, active(or not)
# set -g set-titles-string '#h (#{pane_current_command}) [#{b:pane_current_path}]' # window number,program name, active(or not)

set -g base-index 1
set -g pane-base-index 1

# set OSC 52 escape sequence & terminal clipboard
set -g set-clipboard off

set -g mouse off

## 修改 panel 默认菜单，禁用复制文本的功能
bind -n MouseDown3Pane if -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' { select-pane -t=; send -M } { display-menu -t= -xM -yM -T '#[align=centre]#{pane_index} (#{pane_id})' \
  '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}' '<' {send -X history-top} \
	'#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}' '>' {send -X history-bottom} \
	'' \
	'#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' 'C-r' {if -F '#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}' 'copy-mode -t='; send -Xt= search-backward \"#{q:mouse_word}\"} \
	'#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' 'C-y' {send-keys -l -- \"#{q:mouse_word}\"} \
	'' \
	'Horizontal Split' 'h' {split-window -h} \
	'Vertical Split' 'v' {split-window -v} \
	'' \
	'#{?#{>:#{window_panes},1},,-}Swap Up' 'u' {swap-pane -U} \
	'#{?#{>:#{window_panes},1},,-}Swap Down' 'd' {swap-pane -D} \
	'#{?pane_marked_set,,-}Swap Marked' 's' {swap-pane} \
	'' \
	'Kill' 'X' {kill-pane} \
	'Respawn' 'R' {respawn-pane -k} \
	'#{?pane_marked,Unmark,Mark}' 'm' {select-pane -m} \
	'#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z} \
  }

set-window-option -g mode-keys vi
bind -T copy-mode-vi v send-keys -X begin-selection
# 这样写不能跨平台使用
# bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel  # Mac
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p"  # Linux 使用 xsel
# tmux-yank 配置, xsel 或 xclip 使用 primary
set-option -g "@yank_selection" primary

# 鼠标选择文本时复制到系统剪切板，默认是复制到 paste-buffer
# tmux-yank 插件会覆盖这个配置
# https://unix.stackexchange.com/a/398805
# https://github.com/tmux/tmux/issues/140
# https://unix.stackexchange.com/a/332425
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-no-clear

bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
bind C new-window -c "$HOME"

# detach tmux 的时候也退出 ssh/shell
# detach tmux 的时候关闭 xsel child process，否则 ssh 连接会退出不了
bind d run-shell "killall xsel >/dev/null 2>&1; tmux detach -P"

bind K kill-server

# prefix C-o 容易和 prefix 误触，索性改成和 prefix o 一样的功能
# https://unix.stackexchange.com/questions/53154/how-do-i-cycle-through-panes-inside-a-window-in-tmux-like-in-screen
unbind C-o
# 容易在 Vim 中误触发，暂时关掉
# bind C-o select-pane -t :.+

# 显示 pane 编号时不自动消失
bind q display-panes -d 0

# 返回上一个 pane
# https://stackoverflow.com/a/31988685
bind -r L select-pane -l

set -g status-interval 2
set -g status-justify left
setw -g monitor-activity on

# 忽略 powerline-daemon 已经启动返回的错误
run-shell "powerline-daemon -q || true"
if-shell '[ "$(uname -s)" = "Darwin" ]' 'source /usr/local/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf'
if-shell 'grep -Eo ubuntu /etc/os-release' 'source /usr/local/lib/python3.7/dist-packages/powerline/bindings/tmux/powerline.conf'
if-shell 'grep -Eo arch /etc/os-release' 'source /usr/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf'
if-shell 'grep -Eo centos /etc/os-release' 'source /usr/local/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf'

# tmux-resurrect config
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-capture-pane-contents 'on'
# set -g @resurrect-save-shell-history 'on'

# tmux-continuum config
set -g @continuum-save-interval '0'
set -g @continuum-restore 'on'

# List of plugins
# First of all, install tmp
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
